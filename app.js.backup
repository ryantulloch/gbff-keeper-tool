/**
 * Fantasy Keeper Submission Tool - Main Application JavaScript
 * Auto-reveal countdown system with Firebase sync
 */

// ============================================
// 1. FIREBASE CONFIGURATION & INITIALIZATION
// ============================================

// Global variables
let db = null;
let submissions = {};
let deadline = null;
let timerInterval = null;
let firebaseConnected = false;
let countdownStartTime = null;
let countdownInterval = null;
let isCountdownActive = false;
let isAutoRevealing = false;

// Firebase configuration (hardcoded for this app)
const firebaseConfig = {
    apiKey: "AIzaSyAQLCxk6rbl7chpifupFXa3TLV9ZvWsf2E",
    authDomain: "gbbf-keepers-tool.firebaseapp.com",
    databaseURL: "https://gbbf-keepers-tool-default-rtdb.firebaseio.com",
    projectId: "gbbf-keepers-tool",
    storageBucket: "gbbf-keepers-tool.appspot.com",
    messagingSenderId: "797435886779",
    appId: "1:797435886779:web:9c3f5a6129e6d7940afd9e"
};

/**
 * Connect to Firebase and initialize database
 */
function connectFirebase() {
    try {
        // Initialize Firebase
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }
        
        db = firebase.database();
        
        // Monitor connection status
        db.ref('.info/connected').on('value', (snapshot) => {
            const connected = snapshot.val();
            const status = document.getElementById('syncStatus');
            if (connected) {
                status.className = 'sync-status connected';
                status.innerHTML = '<span>Live Sync Active</span>';
                firebaseConnected = true;
                
                // Start listening for data
                initializeListeners();
            } else {
                status.className = 'sync-status disconnected';
                status.innerHTML = '<span>Offline</span>';
            }
        });
        
    } catch (error) {
        console.error('Firebase error:', error);
        alert('Firebase connection failed: ' + error.message);
    }
}

/**
 * Initialize Firebase data listeners
 */
function initializeListeners() {
    // Listen for deadline changes
    db.ref('deadline').on('value', (snapshot) => {
        deadline = snapshot.val();
        if (deadline) {
            const date = new Date(deadline);
            const localDateTime = new Date(date.getTime() - date.getTimezoneOffset() * 60000)
                .toISOString()
                .slice(0, 16);
            document.getElementById('deadlineInput').value = localDateTime;
            startTimer();
        } else {
            // No deadline in Firebase, use default
            document.getElementById('deadlineInput').value = '2025-09-02T00:00';
        }
    });

    // Listen for submission changes
    db.ref('submissions').on('value', (snapshot) => {
        submissions = snapshot.val() || {};
        updateDisplay();
    });

    // Listen for countdown start time
    db.ref('countdownStartTime').on('value', (snapshot) => {
        const newCountdownStartTime = snapshot.val();
        console.log('Countdown start time from Firebase:', newCountdownStartTime);
        
        if (newCountdownStartTime) {
            const elapsed = Date.now() - newCountdownStartTime;
            console.log('Countdown elapsed time:', elapsed, 'ms');
            
            // Only join countdown if it's recent (less than 10 seconds old) and still valid
            if (elapsed < 10000 && elapsed >= 0) {
                if (!isCountdownActive && !isAutoRevealing) {
                    countdownStartTime = newCountdownStartTime;
                    console.log('Joining countdown in progress');
                    startCountdown();
                }
            } else if (elapsed >= 10000) {
                // Countdown is old and should have finished, clean it up
                console.log('Countdown is stale, cleaning up');
                db.ref('countdownStartTime').remove();
                isCountdownActive = false;
                isAutoRevealing = false;
            }
        } else if (newCountdownStartTime !== countdownStartTime) {
            // Countdown was cleared
            console.log('Countdown cleared from Firebase');
            countdownStartTime = null;
            isCountdownActive = false;
            isAutoRevealing = false;
            document.getElementById('countdownOverlay').classList.remove('active');
            document.getElementById('autoRevealNotice').style.display = 'none';
        }
    });
}

// ============================================
// 2. ENCRYPTION UTILITIES
// ============================================

/**
 * Encrypt text using XOR cipher with password
 */
function encrypt(text, password) {
    let encrypted = '';
    for (let i = 0; i < text.length; i++) {
        encrypted += String.fromCharCode(text.charCodeAt(i) ^ password.charCodeAt(i % password.length));
    }
    return btoa(encrypted);
}

/**
 * Decrypt text using XOR cipher with password
 */
function decrypt(encrypted, password) {
    try {
        let decoded = atob(encrypted);
        let decrypted = '';
        for (let i = 0; i < decoded.length; i++) {
            decrypted += String.fromCharCode(decoded.charCodeAt(i) ^ password.charCodeAt(i % password.length));
        }
        return decrypted;
    } catch (e) {
        return null;
    }
}

/**
 * Generate hash for integrity verification
 */
function hash(text) {
    let hash = 0;
    for (let i = 0; i < text.length; i++) {
        hash = ((hash << 5) - hash) + text.charCodeAt(i);
        hash = hash & hash;
    }
    return Math.abs(hash).toString(16);
}

// ============================================
// 3. COUNTDOWN MANAGEMENT
// ============================================

/**
 * Start the deadline countdown timer
 */
function startTimer() {
    if (timerInterval) clearInterval(timerInterval);
    timerInterval = setInterval(updateTimer, 1000);
    updateTimer();
}

/**
 * Update the deadline timer display
 */
function updateTimer() {
    const timerDisplay = document.getElementById('timerDisplay');
    const phaseIndicator = document.getElementById('phaseIndicator');
    
    if (!deadline) {
        timerDisplay.textContent = 'No deadline set';
        return;
    }

    const now = Date.now();
    const diff = deadline - now;

    if (diff <= 0 && !isCountdownActive && !isAutoRevealing) {
        // Only auto-start countdown if deadline just passed (within 24 hours)
        const timeSinceExpiry = Math.abs(diff);
        if (timeSinceExpiry <= 86400000) { // 24 hours
            console.log('Deadline recently passed, initiating countdown...');
            initiateCountdown();
        } else {
            // Deadline passed too long ago
            timerDisplay.textContent = 'DEADLINE EXPIRED - Please set a new deadline';
            timerDisplay.className = 'timer expired';
            phaseIndicator.textContent = 'Expired';
            phaseIndicator.className = 'phase-indicator phase-locked';
            document.getElementById('submitButton').disabled = true;
        }
    } else if (diff > 0) {
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);
        
        // Format the countdown with sophisticated styling
        let countdownHTML = '<div class="countdown-display">';
        
        if (days > 0) {
            countdownHTML += `
                <div class="countdown-segment">
                    <span class="countdown-value">${days.toString().padStart(2, '0')}</span>
                    <span class="countdown-label">DAYS</span>
                </div>
                <span class="countdown-separator">:</span>`;
        }
        
        countdownHTML += `
            <div class="countdown-segment">
                <span class="countdown-value">${hours.toString().padStart(2, '0')}</span>
                <span class="countdown-label">HRS</span>
            </div>
            <span class="countdown-separator">:</span>
            <div class="countdown-segment">
                <span class="countdown-value">${minutes.toString().padStart(2, '0')}</span>
                <span class="countdown-label">MIN</span>
            </div>
            <span class="countdown-separator">:</span>
            <div class="countdown-segment">
                <span class="countdown-value">${seconds.toString().padStart(2, '0')}</span>
                <span class="countdown-label">SEC</span>
            </div>
        </div>`;
        
        timerDisplay.innerHTML = countdownHTML;
        timerDisplay.className = 'timer active-countdown';
        phaseIndicator.textContent = 'Submission Phase';
        phaseIndicator.className = 'phase-indicator phase-submission';
        document.getElementById('submitButton').disabled = false;
    }
}

/**
 * Initiate the auto-reveal countdown
 */
function initiateCountdown() {
    if (isCountdownActive || isAutoRevealing) {
        console.log('‚ö†Ô∏è Countdown already active, skipping initiation');
        return;
    }
    
    console.log('üîç Checking if countdown should start...', submissions);
    
    // Only start countdown if there are submissions and not all are revealed
    const hasSubmissions = Object.keys(submissions).length > 0;
    const allRevealed = hasSubmissions && Object.values(submissions).every(s => s.revealed);
    
    if (!hasSubmissions || allRevealed) {
        console.log('‚ùå No countdown needed - no submissions or all revealed');
        document.getElementById('timerDisplay').textContent = 'DEADLINE PASSED - No submissions to reveal';
        document.getElementById('timerDisplay').className = 'timer expired';
        document.getElementById('phaseIndicator').textContent = 'Complete';
        document.getElementById('phaseIndicator').className = 'phase-indicator phase-reveal';
        return;
    }

    // Set countdown start time in Firebase (so all users sync)
    const startTime = Date.now();
    console.log('‚è∞ Setting countdown start time in Firebase:', new Date(startTime));
    
    db.ref('countdownStartTime').set(startTime).then(() => {
        console.log('‚úÖ Countdown start time successfully set in Firebase');
        // Also trigger locally in case Firebase is slow
        setTimeout(() => {
            if (!isCountdownActive) {
                console.log('üîÑ Firebase listener slow, triggering countdown locally');
                countdownStartTime = startTime;
                startCountdown();
            }
        }, 1000);
    }).catch((error) => {
        console.error('‚ùå Error setting countdown start time:', error);
        // Fallback - start countdown locally if Firebase fails
        countdownStartTime = startTime;
        startCountdown();
    });
}

/**
 * Start the 10-second reveal countdown
 */
function startCountdown() {
    if (isCountdownActive || isAutoRevealing) {
        console.log('Countdown already active or auto-revealing, skipping');
        return;
    }
    
    console.log('üöÄ STARTING FULL-SCREEN COUNTDOWN NOW!');
    isCountdownActive = true;
    
    // Show the full-screen overlay
    const overlay = document.getElementById('countdownOverlay');
    overlay.classList.add('active');
    
    // Show the notice banner
    document.getElementById('autoRevealNotice').style.display = 'block';
    
    // Update timer display
    const timerDisplay = document.getElementById('timerDisplay');
    timerDisplay.style.display = 'none'; // Hide main timer during overlay
    const phaseIndicator = document.getElementById('phaseIndicator');
    timerDisplay.className = 'timer countdown';
    phaseIndicator.textContent = 'AUTO-REVEAL COUNTDOWN';
    phaseIndicator.className = 'phase-indicator phase-countdown';
    
    // Disable submit button during countdown
    document.getElementById('submitButton').disabled = true;
    
    // Update page title for users on other tabs
    document.title = 'üö® KEEPER COUNTDOWN IN PROGRESS! üö®';
    
    if (countdownInterval) clearInterval(countdownInterval);
    countdownInterval = setInterval(updateCountdown, 1000);
    updateCountdown(); // Start immediately
}

/**
 * Update countdown display every second
 */
function updateCountdown() {
    if (!countdownStartTime) return;
    
    const elapsed = Date.now() - countdownStartTime;
    const remaining = Math.max(0, 10 - Math.floor(elapsed / 1000));
    
    // Update overlay countdown
    const countdownDisplay = document.getElementById('countdownDisplay');
    const countdownRing = document.getElementById('countdownRing');
    
    // Add number change animation
    const prevNumber = countdownDisplay.textContent;
    if (prevNumber !== remaining.toString()) {
        countdownDisplay.classList.add('changing');
        setTimeout(() => countdownDisplay.classList.remove('changing'), 500);
    }
    
    countdownDisplay.textContent = remaining;
    
    // Update circular progress ring
    const circumference = 2 * Math.PI * 130; // radius is 130
    const offset = circumference - (remaining / 10) * circumference;
    if (countdownRing) {
        countdownRing.style.strokeDashoffset = offset;
    }
    
    // Add final 3 seconds pulsing
    if (remaining <= 3 && remaining > 0) {
        countdownDisplay.className = 'countdown-number final-3';
        // Add gradient color change for final seconds
        if (countdownRing) {
            countdownRing.style.stroke = '#ff4444';
        }
    } else {
        countdownDisplay.className = 'countdown-number';
        if (countdownRing) {
            countdownRing.style.stroke = 'url(#gradient)';
        }
    }
    
    // Update main timer (hidden during overlay)
    document.getElementById('timerDisplay').textContent = `AUTO-REVEAL IN: ${remaining} SECONDS`;
    
    // Update page title
    document.title = remaining > 0 ? `${remaining}s - GBFF KEEPER REVEAL` : 'KEEPERS REVEALED!';
    
    if (remaining <= 0) {
        clearInterval(countdownInterval);
        executeAutoReveal();
    }
}

/**
 * Execute the auto-reveal of all submissions
 */
function executeAutoReveal() {
    if (isAutoRevealing) return;
    isAutoRevealing = true;
    
    // Hide countdown overlay
    const overlay = document.getElementById('countdownOverlay');
    overlay.classList.remove('active');
    document.getElementById('autoRevealNotice').style.display = 'none';
    
    // Show confetti
    createConfetti();
    
    // Auto-reveal all submissions
    const unrevealed = Object.entries(submissions).filter(([key, sub]) => !sub.revealed);
    
    let revealPromises = unrevealed.map(([teamKey, submission]) => {
        if (submission.encryptedPassword) {
            // Decrypt the password and then decrypt the keepers
            const decryptedPassword = decrypt(submission.encryptedPassword, 'SYSTEM_KEY_2024');
            const decryptedKeepers = decrypt(submission.encryptedKeepers, decryptedPassword);
            
            if (decryptedKeepers) {
                // Update Firebase with revealed data
                return Promise.all([
                    db.ref('submissions/' + teamKey + '/revealed').set(true),
                    db.ref('submissions/' + teamKey + '/keepers').set(decryptedKeepers)
                ]);
            }
        }
        return Promise.resolve();
    });
    
    Promise.all(revealPromises).then(() => {
        // HIDE ALL UI ELEMENTS EXCEPT SUBMISSIONS
        document.getElementById('instructionsSection').style.display = 'none';
        document.getElementById('statusBar').style.display = 'none';
        document.getElementById('commissionerSection').style.display = 'none';
        document.getElementById('submitTab').style.display = 'none';
        document.getElementById('submitContent').style.display = 'none';
        document.getElementById('syncStatus').style.display = 'none';
        
        // Hide the tabs bar but keep the view content
        const tabButtons = document.querySelector('.flex.border-b.border-gray-200');
        if (tabButtons) tabButtons.style.display = 'none';
        
        // Show only the view tab content
        const viewContent = document.getElementById('viewContent');
        viewContent.classList.remove('hidden');
        viewContent.style.display = 'block';
        
        // Hide search and refresh controls in view tab
        const searchControls = viewContent.querySelector('.mb-4.flex');
        if (searchControls) searchControls.style.display = 'none';
        
        // Transform the page into post-reveal mode
        document.body.classList.add('post-reveal-mode');
        
        // Update header for final reveal state
        const header = document.getElementById('mainHeader');
        header.className = 'post-reveal-header';
        
        const headerTitle = document.getElementById('headerTitle');
        headerTitle.className = 'reveal-complete-title';
        headerTitle.innerHTML = 'üèÜ GBFF KEEPERS - FINAL RESULTS üèÜ';
        
        const headerSubtitle = document.getElementById('headerSubtitle');
        headerSubtitle.className = 'reveal-complete-subtitle';
        headerSubtitle.textContent = 'The official keeper selections have been revealed';
        
        // Transform container for better presentation
        const container = document.querySelector('.container');
        container.className = 'submissions-reveal-container';
        
        // Update tabs container to be cleaner
        const tabsContainer = document.getElementById('tabsContainer');
        tabsContainer.style.background = 'transparent';
        tabsContainer.style.boxShadow = 'none';
        tabsContainer.style.border = 'none';
        
        // Add final-reveal class to all submission items
        const submissionItems = document.querySelectorAll('.submission-item');
        submissionItems.forEach((item, index) => {
            item.classList.add('final-reveal');
            // Add staggered animation
            item.style.animationDelay = `${index * 0.1}s`;
        });
        
        // Update page title
        document.title = 'üèÜ GBFF Keepers - Final Results';
        
        // Show subtle confetti
        createSubtleConfetti();
        
        // Play subtle celebration sound (if user allows)
        try {
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+L2wmsiBjiH0fDTgCkFJHfH8N2QQAoUXrTp66hVFApGn+L2wmsiBjiBzPPYizYIG2q+7OSoVBEMUaTh8bliGwU/ltryxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8rNgGwU/ltryxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHws/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8rNgGwU/ltryxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHws/ltzyxnkpBSl+zPLaizcIGGE57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs/ltzyxnkpBSl+zPLaizcIGGS57OihUBELTKXh8bllHgs=');
            audio.volume = 0.5; // Softer volume
            audio.play();
        } catch (e) {
            // Silent fail for audio
        }
    });
}

/**
 * Allow escape from countdown overlay
 */
function escapeCountdown() {
    console.log('üö™ Escaping countdown overlay - countdown continues in background');
    
    // Hide overlay immediately
    const overlay = document.getElementById('countdownOverlay');
    overlay.classList.remove('active');
    document.getElementById('autoRevealNotice').style.display = 'none';
    document.getElementById('timerDisplay').style.display = 'block'; // Show main timer again
    
    // Countdown continues in background
    alert('üö™ Overlay dismissed! Countdown continues in background. You can access reset and other controls.');
}

// ============================================
// 4. FORM SUBMISSION HANDLERS
// ============================================

/**
 * Submit keepers to Firebase
 */
function submitKeepers(event) {
    // Prevent form submission if called from form
    if (event && event.preventDefault) {
        event.preventDefault();
    }
    
    if (!firebaseConnected) {
        alert('Not connected to Firebase! Please set up connection first.');
        return;
    }

    const teamName = document.getElementById('teamName').value.trim();
    
    // Get all keeper inputs - looking for inputs with name="keeper"
    const keeperInputs = document.querySelectorAll('input[name="keeper"]');
    const keepers = [];
    
    // Collect non-empty keeper values
    keeperInputs.forEach(input => {
        const value = input.value.trim();
        if (value) {
            keepers.push(value);
        }
    });
    
    // Join keepers with newlines for backward compatibility with existing data format
    const keepersList = keepers.join('\n');
    
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    // Create or use message div for feedback
    let messageDiv = document.getElementById('submitMessage');
    if (!messageDiv) {
        // Create message div if it doesn't exist
        messageDiv = document.createElement('div');
        messageDiv.id = 'submitMessage';
        const form = document.getElementById('keeperForm');
        form.insertBefore(messageDiv, form.firstChild);
    }

    // Validation - no minimum keepers, allow 0 if user wants
    if (!teamName || !password) {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Please fill in team name and password</div>';
        return;
    }
    
    // Check max keepers
    if (keepers.length > MAX_KEEPERS) {
        messageDiv.innerHTML = `<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Maximum ${MAX_KEEPERS} keepers allowed</div>`;
        return;
    }

    if (password !== confirmPassword) {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Passwords do not match</div>';
        return;
    }

    if (password.length < 4) {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Password must be at least 4 characters</div>';
        return;
    }

    // Check if team already submitted
    const teamKey = teamName.replace(/[.$#\[\]\/]/g, '_');
    if (submissions[teamKey]) {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">This team has already submitted</div>';
        return;
    }

    // Check deadline
    if (deadline && Date.now() > deadline) {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Deadline has passed - submissions are locked</div>';
        return;
    }

    // Create submission with encrypted password for auto-reveal
    const submission = {
        teamName: teamName,
        encryptedKeepers: encrypt(keepersList, password),
        encryptedPassword: encrypt(password, 'SYSTEM_KEY_2024'), // Store encrypted password for auto-reveal
        hash: hash(keepersList + password),
        timestamp: Date.now(),
        revealed: false,
        keepers: null
    };

    // Save to Firebase
    db.ref('submissions/' + teamKey).set(submission).then(() => {
        // Clear form
        document.getElementById('teamName').value = '';
        // Reset keeper fields to initial 3
        initializeKeeperFields();
        document.getElementById('password').value = '';
        document.getElementById('confirmPassword').value = '';

        messageDiv.innerHTML = '<div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4">‚úÖ Keepers submitted successfully! Your keepers will be auto-revealed after the deadline + 10 second countdown!</div>';
    }).catch((error) => {
        messageDiv.innerHTML = '<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">Error submitting: ' + error.message + '</div>';
    });
}

/**
 * Manually reveal a submission (requires password)
 */
function revealSubmission(teamKey) {
    const password = prompt('Enter password for ' + submissions[teamKey].teamName + ':');
    if (!password) return;

    const submission = submissions[teamKey];
    if (!submission) return;

    const decrypted = decrypt(submission.encryptedKeepers, password);
    if (!decrypted) {
        alert('Incorrect password!');
        return;
    }

    // Verify hash
    const checkHash = hash(decrypted + password);
    if (checkHash !== submission.hash) {
        alert('Password verification failed!');
        return;
    }

    // Update submission with revealed data
    db.ref('submissions/' + teamKey + '/revealed').set(true);
    db.ref('submissions/' + teamKey + '/keepers').set(decrypted).then(() => {
        alert('Keepers revealed successfully!');
    }).catch((error) => {
        alert('Error revealing: ' + error.message);
    });
}

// ============================================
// 5. DISPLAY UPDATE FUNCTIONS
// ============================================

/**
 * Update the submissions display
 */
function updateDisplay() {
    const list = document.getElementById('submissionsList');
    
    if (Object.keys(submissions).length === 0) {
        list.innerHTML = '<p style="color: #718096;">No submissions yet... Be the first!</p>';
        return;
    }

    const isLocked = deadline && Date.now() > deadline;
    
    list.innerHTML = Object.keys(submissions).map(teamKey => {
        const sub = submissions[teamKey];
        const isNewlyRevealed = sub.revealed && !sub._wasRevealed;
        if (isNewlyRevealed) {
            sub._wasRevealed = true; // Mark as seen
        }
        
        return `
            <div class="submission-item ${sub.revealed ? 'revealed' : ''} ${isNewlyRevealed ? 'reveal-animation' : ''}">
                <div class="submission-header">
                    <span class="team-name">${sub.teamName}</span>
                    <span class="submission-time">${new Date(sub.timestamp).toLocaleString()}</span>
                </div>
                ${!sub.revealed ? `
                    <div class="encrypted-hash">
                        <strong>Encrypted Hash:</strong> ${sub.hash}
                    </div>
                    ${isLocked && !isCountdownActive ? `
                        <button onclick="revealSubmission('${teamKey}')" style="margin-top: 10px;">
                            üîì Manual Reveal (if needed)
                        </button>
                    ` : '<p style="color: #718096; font-size: 0.9em;">‚è≥ Will auto-reveal after countdown...</p>'}
                ` : `
                    <div class="keeper-list">
                        <strong>üèÜ Keepers:</strong><br>
                        ${sub.keepers.split('\n').map(k => 'üèà ' + k).join('<br>')}
                    </div>
                `}
            </div>
        `;
    }).join('');
}

/**
 * Create confetti animation
 */
function createConfetti() {
    const colors = ['#f39c12', '#e74c3c', '#9b59b6', '#3498db', '#2ecc71'];
    
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = Math.random() * 100 + '%';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.animationDelay = Math.random() * 3 + 's';
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 3000);
        }, i * 100);
    }
}

/**
 * Create subtle confetti for post-reveal celebration
 */
function createSubtleConfetti() {
    const colors = ['#667eea', '#764ba2', '#ffd700', '#ff6b6b'];
    
    for (let i = 0; i < 30; i++) { // Less confetti for subtlety
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'subtle-confetti';
            confetti.style.left = Math.random() * 100 + '%';
            confetti.style.background = `linear-gradient(45deg, ${colors[Math.floor(Math.random() * colors.length)]}, ${colors[Math.floor(Math.random() * colors.length)]})`;
            confetti.style.animationDelay = Math.random() * 2 + 's';
            confetti.style.animationDuration = (4 + Math.random() * 2) + 's';
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 6000);
        }, i * 150);
    }
}

// ============================================
// 6. TAB SWITCHING
// ============================================

/**
 * Switch between submit and view tabs
 */
function switchTab(tabName) {
    const submitTab = document.getElementById('submitTab');
    const viewTab = document.getElementById('viewTab');
    const submitContent = document.getElementById('submitContent');
    const viewContent = document.getElementById('viewContent');
    
    if (tabName === 'submit') {
        // Activate submit tab
        submitTab.className = 'flex-1 px-4 py-3 text-center font-medium transition-colors bg-blue-50 text-blue-700 border-b-2 border-blue-500';
        viewTab.className = 'flex-1 px-4 py-3 text-center font-medium transition-colors text-gray-600 hover:text-gray-800 hover:bg-gray-50';
        submitContent.classList.remove('hidden');
        viewContent.classList.add('hidden');
    } else if (tabName === 'view') {
        // Activate view tab
        viewTab.className = 'flex-1 px-4 py-3 text-center font-medium transition-colors bg-blue-50 text-blue-700 border-b-2 border-blue-500';
        submitTab.className = 'flex-1 px-4 py-3 text-center font-medium transition-colors text-gray-600 hover:text-gray-800 hover:bg-gray-50';
        viewContent.classList.remove('hidden');
        submitContent.classList.add('hidden');
        // Refresh the submissions when switching to view tab
        updateDisplay();
    }
}

// ============================================
// 7. COMMISSIONER FUNCTIONS
// ============================================

/**
 * Set the deadline (commissioner only)
 */
function setDeadline() {
    const input = document.getElementById('deadlineInput').value;
    
    if (!input) {
        alert('Please select a deadline date and time');
        return;
    }
    
    // Prompt for commissioner password
    const password = prompt('üîí Commissioner Password Required:');
    if (password !== 'fuckwill') {
        alert('‚ùå Invalid commissioner password! Only the commissioner can set deadlines.');
        return;
    }
    
    const newDeadline = new Date(input).getTime();
    
    // Clear any old countdown data when setting new deadline
    Promise.all([
        db.ref('deadline').set(newDeadline),
        db.ref('countdownStartTime').remove()
    ]).then(() => {
        alert('‚úÖ Deadline set! All users will see this deadline.');
        
        // Reset countdown states
        isCountdownActive = false;
        isAutoRevealing = false;
        countdownStartTime = null;
        document.getElementById('countdownOverlay').classList.remove('active');
        document.getElementById('autoRevealNotice').style.display = 'none';
    }).catch((error) => {
        alert('Error setting deadline: ' + error.message);
    });
}

/**
 * Reset everything (commissioner only)
 */
function resetEverything() {
    // Prompt for commissioner password
    const password = prompt('üîí Commissioner Password Required for Reset:');
    if (password !== 'fuckwill') {
        alert('‚ùå Invalid commissioner password! Only the commissioner can reset.');
        return;
    }
    
    if (confirm('üö® Are you sure you want to RESET EVERYTHING? This will clear all submissions, deadlines, and countdowns!')) {
        Promise.all([
            db.ref('deadline').remove(),
            db.ref('countdownStartTime').remove(),
            db.ref('submissions').remove()
        ]).then(() => {
            alert('‚úÖ Everything reset! Fresh start ready.');
            
            // Reset local state
            submissions = {};
            deadline = null;
            countdownStartTime = null;
            isCountdownActive = false;
            isAutoRevealing = false;
            
            // Clear any running intervals
            if (timerInterval) clearInterval(timerInterval);
            if (countdownInterval) clearInterval(countdownInterval);
            
            // Reset UI completely
            document.getElementById('deadlineInput').value = '2025-09-02T00:00';
            document.getElementById('timerDisplay').textContent = 'No deadline set';
            document.getElementById('timerDisplay').className = 'timer';
            document.getElementById('timerDisplay').style.display = 'block';
            document.getElementById('phaseIndicator').textContent = 'Submission Phase';
            document.getElementById('phaseIndicator').className = 'phase-indicator phase-submission';
            document.getElementById('countdownOverlay').classList.remove('active');
            document.getElementById('autoRevealNotice').style.display = 'none';
            document.getElementById('submitButton').disabled = false;
            updateDisplay();
        }).catch((error) => {
            alert('Error resetting: ' + error.message);
        });
    }
}

// ============================================
// 8. DYNAMIC KEEPER FIELDS MANAGEMENT
// ============================================

let keeperFieldCount = 0;
const MIN_KEEPERS = 1;
const MAX_KEEPERS = 20;

/**
 * Initialize keeper fields on page load
 */
function initializeKeeperFields() {
    const keepersList = document.getElementById('keepersList');
    keepersList.innerHTML = ''; // Clear existing fields
    keeperFieldCount = 0;
    
    // Start with 3 keeper fields
    for (let i = 0; i < 3; i++) {
        addKeeperField(false); // false = don't animate on initial load
    }
}

/**
 * Add a new keeper input field
 */
function addKeeperField(animate = true) {
    if (keeperFieldCount >= MAX_KEEPERS) {
        alert(`Maximum ${MAX_KEEPERS} keepers allowed`);
        return;
    }
    
    keeperFieldCount++;
    const keepersList = document.getElementById('keepersList');
    
    // Create wrapper div for the keeper field
    const fieldWrapper = document.createElement('div');
    fieldWrapper.className = 'keeper-field-wrapper flex gap-2 items-center';
    fieldWrapper.id = `keeper-field-${keeperFieldCount}`;
    
    if (animate) {
        fieldWrapper.style.opacity = '0';
        fieldWrapper.style.transform = 'translateY(-10px)';
    }
    
    // Create label
    const label = document.createElement('span');
    label.className = 'text-sm font-medium text-gray-600 w-20 flex-shrink-0';
    label.textContent = `Keeper ${keeperFieldCount}:`;
    
    // Create input
    const input = document.createElement('input');
    input.type = 'text';
    input.name = 'keeper';
    input.className = 'flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
    input.placeholder = keeperFieldCount <= 3 ? 'Player name (optional)' : 'Player name (optional)';
    
    // Create remove button
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'remove-keeper-btn w-10 h-10 bg-red-500 text-white rounded-full hover:bg-red-600 transition-all duration-200 transform hover:scale-110 flex items-center justify-center shadow-md';
    removeBtn.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
    removeBtn.onclick = function() {
        removeKeeperField(fieldWrapper.id);
    };
    
    // Only show remove button if more than minimum fields
    if (keeperFieldCount <= MIN_KEEPERS) {
        removeBtn.style.visibility = 'hidden';
    }
    
    // Assemble the field
    fieldWrapper.appendChild(label);
    fieldWrapper.appendChild(input);
    fieldWrapper.appendChild(removeBtn);
    
    // Add to list
    keepersList.appendChild(fieldWrapper);
    
    // Animate in if requested
    if (animate) {
        setTimeout(() => {
            fieldWrapper.style.transition = 'all 0.3s ease';
            fieldWrapper.style.opacity = '1';
            fieldWrapper.style.transform = 'translateY(0)';
            input.focus();
        }, 10);
    }
    
    // Update remove button visibility for all fields
    updateRemoveButtonVisibility();
    
    // Disable add button if at max
    const addBtn = document.getElementById('addKeeperBtn');
    if (keeperFieldCount >= MAX_KEEPERS) {
        addBtn.disabled = true;
        addBtn.className = addBtn.className.replace('bg-green-600 hover:bg-green-700', 'bg-gray-400 cursor-not-allowed');
    }
}

/**
 * Remove a keeper input field
 */
function removeKeeperField(fieldId) {
    const fieldWrapper = document.getElementById(fieldId);
    if (!fieldWrapper) return;
    
    // Get current keeper count
    const currentFields = document.querySelectorAll('.keeper-field-wrapper').length;
    
    if (currentFields <= MIN_KEEPERS) {
        alert(`Must have at least ${MIN_KEEPERS} keeper field`);
        return;
    }
    
    // Animate out
    fieldWrapper.style.transition = 'all 0.3s ease';
    fieldWrapper.style.opacity = '0';
    fieldWrapper.style.transform = 'translateX(-20px)';
    
    setTimeout(() => {
        fieldWrapper.remove();
        
        // Re-number remaining fields
        renumberKeeperFields();
        
        // Update remove button visibility
        updateRemoveButtonVisibility();
        
        // Re-enable add button if was disabled
        const addBtn = document.getElementById('addKeeperBtn');
        if (addBtn.disabled) {
            addBtn.disabled = false;
            addBtn.className = addBtn.className.replace('bg-gray-400 cursor-not-allowed', 'bg-green-600 hover:bg-green-700');
        }
    }, 300);
}

/**
 * Renumber keeper fields after removal
 */
function renumberKeeperFields() {
    const fields = document.querySelectorAll('.keeper-field-wrapper');
    keeperFieldCount = fields.length;
    
    fields.forEach((field, index) => {
        const label = field.querySelector('span');
        label.textContent = `Keeper ${index + 1}:`;
        field.id = `keeper-field-${index + 1}`;
    });
}

/**
 * Update remove button visibility based on field count
 */
function updateRemoveButtonVisibility() {
    const fields = document.querySelectorAll('.keeper-field-wrapper');
    const removeButtons = document.querySelectorAll('.remove-keeper-btn');
    
    removeButtons.forEach(btn => {
        if (fields.length <= MIN_KEEPERS) {
            btn.style.visibility = 'hidden';
        } else {
            btn.style.visibility = 'visible';
        }
    });
}

// ============================================
// 9. EVENT LISTENERS & INITIALIZATION
// ============================================

/**
 * Initialize app on page load
 */
window.onload = function() {
    // Auto-connect to Firebase
    connectFirebase();
    
    // Initialize keeper fields
    initializeKeeperFields();
    
    // Ensure default deadline is set in the input
    if (!document.getElementById('deadlineInput').value) {
        document.getElementById('deadlineInput').value = '2025-09-02T00:00';
    }
};

// ============================================
// 10. ADDITIONAL UI FUNCTIONS
// ============================================

/**
 * Edit existing submission (requires password)
 */
function editSubmission() {
    const teamName = prompt('Enter your team name to edit submission:');
    if (!teamName) return;
    
    const teamKey = teamName.trim().replace(/[.$#\[\]\/]/g, '_');
    const submission = submissions[teamKey];
    
    if (!submission) {
        alert('No submission found for this team name');
        return;
    }
    
    const password = prompt('Enter your password:');
    if (!password) return;
    
    // Try to decrypt to verify password
    const decrypted = decrypt(submission.encryptedKeepers, password);
    if (!decrypted) {
        alert('Incorrect password!');
        return;
    }
    
    // Load the keepers back into the form
    document.getElementById('teamName').value = submission.teamName;
    const keepers = decrypted.split('\n');
    
    // Clear existing keeper fields and add the right number
    const keepersList = document.getElementById('keepersList');
    keepersList.innerHTML = '';
    keeperFieldCount = 0;
    
    // Add fields for each keeper (minimum 3 fields)
    const fieldsToAdd = Math.max(keepers.length, 3);
    for (let i = 0; i < fieldsToAdd; i++) {
        addKeeperField(false); // Don't animate
    }
    
    // Fill in the values
    const keeperInputs = document.querySelectorAll('input[name="keeper"]');
    keepers.forEach((keeper, index) => {
        if (keeperInputs[index]) {
            keeperInputs[index].value = keeper;
        }
    });
    
    // Delete the old submission
    db.ref('submissions/' + teamKey).remove().then(() => {
        alert('Your submission has been loaded for editing. Make your changes and submit again.');
        switchTab('submit');
    });
}

/**
 * Force reveal all submissions (commissioner only)
 */
function forceReveal() {
    const password = document.getElementById('commissionerPassword').value;
    if (password !== 'fuckwill') {
        alert('‚ùå Invalid commissioner password!');
        return;
    }
    
    // Force countdown to start immediately
    initiateCountdown();
}

/**
 * Clear all submissions (commissioner only)
 */
function clearAllSubmissions() {
    const password = document.getElementById('commissionerPassword').value;
    if (password !== 'fuckwill') {
        alert('‚ùå Invalid commissioner password!');
        return;
    }
    
    if (confirm('Are you sure you want to clear ALL submissions?')) {
        db.ref('submissions').remove().then(() => {
            alert('‚úÖ All submissions cleared');
            submissions = {};
            updateDisplay();
        });
    }
}

/**
 * Export submissions to JSON (commissioner only)
 */
function exportSubmissions() {
    const password = document.getElementById('commissionerPassword').value;
    if (password !== 'fuckwill') {
        alert('‚ùå Invalid commissioner password!');
        return;
    }
    
    const dataStr = JSON.stringify(submissions, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `keeper-submissions-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

/**
 * Filter submissions based on search input
 */
function filterSubmissions() {
    const searchValue = document.getElementById('searchInput').value.toLowerCase();
    const submissionItems = document.querySelectorAll('.submission-item');
    
    submissionItems.forEach(item => {
        const teamName = item.querySelector('.team-name').textContent.toLowerCase();
        if (teamName.includes(searchValue)) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
}

/**
 * Refresh submissions display
 */
function refreshSubmissions() {
    updateDisplay();
}

// Export functions for HTML onclick handlers
window.setDeadline = setDeadline;
window.resetEverything = resetEverything;
window.submitKeepers = submitKeepers;
window.revealSubmission = revealSubmission;
window.switchTab = switchTab;
window.escapeCountdown = escapeCountdown;
window.editSubmission = editSubmission;
window.forceReveal = forceReveal;
window.clearAllSubmissions = clearAllSubmissions;
window.exportSubmissions = exportSubmissions;
window.filterSubmissions = filterSubmissions;
window.refreshSubmissions = refreshSubmissions;
window.addKeeperField = addKeeperField;
window.removeKeeperField = removeKeeperField;